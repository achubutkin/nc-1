//
//  CodeBlockRenderer.swift
//  Swifter for SwiftUI
//
//  Created by Alexandr Chubutkin on 16/11/23.
//

import SwiftUI
import Splash

struct CodeBlockRenderer: View {
    @State var block: Block
    @State var isGeneratingCodeBlock: Bool = false
    @State var isGenerationCodeBlockHasError: Bool = false
    @State var isCopied = false
    
    @ScaledMetric(relativeTo: .body) var scaledFontSize: CGFloat = 14
    
    static private let promptAICodeGenerationMessage = "The \(OpenAIConstants.openAIChatGPTModel.uppercased()) thinks about generating a new block of code..."
    var body: some View {
        let highlightedCodeBlock = getHighlightedCodeBlock(block.content)
        
        ZStack {
            VStack(alignment: .trailing) {
                HStack {
                    Text(AttributedString(highlightedCodeBlock))
                        .frame(maxWidth: .infinity, alignment: .leading)
                }
                .padding()
                
                HStack (spacing: 24) {
                    if isGeneratingCodeBlock {
                        Text(CodeBlockRenderer.promptAICodeGenerationMessage)
                            .font(.footnote)
                            .monospaced()
                        
                        Spacer()
                    }
                    
                    if block.aiCodeGeneratorPrompt != nil && !block.aiCodeGeneratorPrompt!.isEmpty {
                        Button(action: generateCodeBlock) {
                            Image("OpenAILogoIcon")
                                .resizable()
                                .aspectRatio(contentMode: /*@START_MENU_TOKEN@*/.fill/*@END_MENU_TOKEN@*/)
                                .frame(width: 32, height: 32)
                                .rotationEffect(.degrees(0))
                        }
                        .buttonStyle(.bordered)
                        .foregroundColor(.black.opacity(0.8))
                        .buttonBorderShape(.circle)
                        .contentTransition(.symbolEffect(.replace))
                        .frame(width: 38, height: 38)
                    }
                    
                    // TODO: fix size for the label and frame
                    Button(action: copyCodeBlock) {
                        Label("Copy", systemImage: isCopied ? "checkmark" : "doc.on.doc")
                            .frame(width: 32, height: 32)
                    }
                    .labelStyle(.iconOnly)
                    .buttonStyle(.bordered)
                    .foregroundColor(.black.opacity(0.8))
                    .buttonBorderShape(.circle)
                    .contentTransition(.symbolEffect(.replace))
                    .frame(width: 38, height: 38)
                }
                .padding()
            }
            .background(Color(red: 245 / 255.0, green: 245 / 255.0, blue: 247 / 255.0))
            .clipShape(RoundedRectangle(cornerRadius: 15))
        }
        .frame(maxWidth: .infinity)
        .padding(EdgeInsets(top: 0, leading: 16, bottom: 24, trailing: 16))
        .alert(OpenAIConstants.openAIChatGPTModel.uppercased(), isPresented: $isGenerationCodeBlockHasError, actions: {
            Button(action: generateCodeBlock) {
                Text("Try again")
            }
            Button(action: {
                isGenerationCodeBlockHasError = false
            }) {
                Text("Cancel")
            }
        }, message: { Text("Error on requesting from \(OpenAIConstants.openAIChatGPTModel.uppercased())")})
    }
    
    func getHighlightedCodeBlock(_ content: String) -> NSAttributedString {
        // TODO: Do I neeed extract SyntaxHighlighter as static singleton instance?
        let highlighter = SyntaxHighlighter(format: AttributedStringOutputFormat(theme: .presentation(withFont: .init(size: scaledFontSize))))
        let highlightedCodeBlock = highlighter.highlight(content)
        return highlightedCodeBlock
    }
    
    func generateCodeBlock() -> Void {
        if openAI.isRequestInProgress {
            return
        }
        
        Task {
            isGenerationCodeBlockHasError = false
            
            withAnimation (.easeInOut(duration: 0.3)) {
                isGeneratingCodeBlock = true
            }
            
            sleep(2)
            
            let message = "Make example of making Button component of Swift UI."
            var needClearCodeBlockField = true
            
            do {
                try await openAI.fetchChatCompletion(message: message, receiveHandler: { message in
                    withAnimation(.easeInOut(duration: 0.3)) {
                        if needClearCodeBlockField {
                            needClearCodeBlockField = false
                            block.content = "//\n// Generated by \(OpenAIConstants.openAIChatGPTModel.uppercased())\n//\n\n"
                            isGeneratingCodeBlock = false
                        }
                        block.content = block.content + message
                    }
                })
                // TODO: previous version
                /*
                 if let choice = response.choices.first {
                 withAnimation(.easeInOut(duration: 0.5)) {
                 content = choice.message.content
                 }
                 }
                 */
            }
            catch {
                isGeneratingCodeBlock = false
                isGenerationCodeBlockHasError = true
            }
        }
    }
    
    func copyCodeBlock() -> Void {
        if isCopied {
            return
        }
        isCopied.toggle()
        UIPasteboard.general.string = block.content
        Task {
            sleep(1)
            isCopied.toggle()
        }
    }
}

#Preview {
    CodeBlockRenderer(block: Block(type: BlockTypes.code, content: "// Comment", aiCodeGeneratorPrompt: "Make example of Button component."))
}


